
TrabalhoPratico2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000037c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000828  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e5  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000413  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  0000177c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ef  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f3  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_20>
  54:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 28 01 	call	0x250	; 0x250 <main>
  88:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setPWM>:
uint16_t counter=0;
uint16_t counter2=0;

void setPWM() //function responsible to setup PWM
{
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0)|(1<<WGM11); //Register modified to have fast PWM
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 6c       	ori	r24, 0xC2	; 194
  98:	80 83       	st	Z, r24
	
	TCCR1B |= (1<<WGM12) |(1<<WGM13)|(1<<CS10); //Register modified to have no PRESCALER and having ICR1 has top value
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	89 61       	ori	r24, 0x19	; 25
  a2:	80 83       	st	Z, r24
	
	ICR1 = 19999; /*PWM_FREQUENCY = F_CPU/N*(1+TOP) PWM CALCULATED FOR 50HZ*/
  a4:	8f e1       	ldi	r24, 0x1F	; 31
  a6:	9e e4       	ldi	r25, 0x4E	; 78
  a8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  ac:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  b0:	08 95       	ret

000000b2 <setBuzzer>:
}

void setBuzzer()
{
	TCCR0A |=(1<<COM0A0) /* Toggle OC0A on Compare Match*/
  b2:	84 b5       	in	r24, 0x24	; 36
  b4:	82 64       	ori	r24, 0x42	; 66
  b6:	84 bd       	out	0x24, r24	; 36
		   |(0<<COM0A1) /**/
		   |(1<<WGM01); //clear on time compare
	
	TCCR0B |=(0<<CS00);//To enable the counter register must be set to one
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	85 bd       	out	0x25, r24	; 37
	
	TIMSK0 |=(1<<OCIE0A)|(1<<TOIE0);//enables overflow interrupt
  bc:	ee e6       	ldi	r30, 0x6E	; 110
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	80 83       	st	Z, r24
	
	OCR0A = 0; // On Compare Register 0 A is set to have the value 0
  c6:	17 bc       	out	0x27, r1	; 39
  c8:	08 95       	ret

000000ca <adc_setup>:
}

void adc_setup()
{
	ADMUX |= (1<<REFS0)|(0<<REFS1)|(1<<MUX1);//Enables VCC as ref voltage also selects ADC2 analog channel
  ca:	ec e7       	ldi	r30, 0x7C	; 124
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	82 64       	ori	r24, 0x42	; 66
  d2:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //enables ADC, starts conversion, auto trigger enabled, ADC presacler set to 128
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8f 6e       	ori	r24, 0xEF	; 239
  dc:	80 83       	st	Z, r24
	
	ADCSRB |= (0<<ADTS0)|(0<<ADTS1)|(0<<ADTS2); // trigger set for free running mode
  de:	eb e7       	ldi	r30, 0x7B	; 123
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{ // function responsible to set up RX and TX communication
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8); //sets the baud rate value
  e8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
  ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0); // register enables RX and TX and also their respective interrupts
  f0:	88 ed       	ldi	r24, 0xD8	; 216
  f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (0<<USBS0)|(3<<UCSZ00);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  fc:	08 95       	ret

000000fe <USART_Receive>:


unsigned char USART_Receive( void )
{ // function responsible to read RX buffer
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 23       	and	r24, r24
 106:	ec f7       	brge	.-6      	; 0x102 <USART_Receive+0x4>
	return UDR0; // returns the value read in RX
 108:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 10c:	08 95       	ret

0000010e <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	95 ff       	sbrs	r25, 5
 116:	fd cf       	rjmp	.-6      	; 0x112 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11c:	08 95       	ret

0000011e <__vector_14>:
}

ISR(TIMER0_COMPA_vect) // interruption enabled on TIMER 0A compare
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	while(melody_counter<5000  && (~PIND&(1<<PD2))){ // while meloduy_counter is minor thant 5000 (hardcoded value) 
 13a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <melody_counter>
 13e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <melody_counter+0x1>
 142:	88 38       	cpi	r24, 0x88	; 136
 144:	93 41       	sbci	r25, 0x13	; 19
 146:	60 f5       	brcc	.+88     	; 0x1a0 <__vector_14+0x82>
 148:	4a 99       	sbic	0x09, 2	; 9
 14a:	2a c0       	rjmp	.+84     	; 0x1a0 <__vector_14+0x82>
													//and while button is not pressed
		PORTB|=(1<<PB2); // turn on LED
		OCR1A= ICR1 - 700; // open servo to -90º
 14c:	a6 e8       	ldi	r26, 0x86	; 134
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	e8 e8       	ldi	r30, 0x88	; 136
 152:	f0 e0       	ldi	r31, 0x00	; 0
			if(melody_counter<=2500)
			{
				OCR0A = 200; //sets value of counter one top to 200 (0-255)
 154:	28 ec       	ldi	r18, 0xC8	; 200
			}
		
			else if(melody_counter<5000)
			{
				OCR0A = 50; //after 2500 loops sets top value of counter to 50
 156:	32 e3       	ldi	r19, 0x32	; 50

ISR(TIMER0_COMPA_vect) // interruption enabled on TIMER 0A compare
{
	while(melody_counter<5000  && (~PIND&(1<<PD2))){ // while meloduy_counter is minor thant 5000 (hardcoded value) 
													//and while button is not pressed
		PORTB|=(1<<PB2); // turn on LED
 158:	2a 9a       	sbi	0x05, 2	; 5
		OCR1A= ICR1 - 700; // open servo to -90º
 15a:	8d 91       	ld	r24, X+
 15c:	9c 91       	ld	r25, X
 15e:	11 97       	sbiw	r26, 0x01	; 1
 160:	8c 5b       	subi	r24, 0xBC	; 188
 162:	92 40       	sbci	r25, 0x02	; 2
 164:	91 83       	std	Z+1, r25	; 0x01
 166:	80 83       	st	Z, r24
			if(melody_counter<=2500)
 168:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <melody_counter>
 16c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <melody_counter+0x1>
 170:	85 3c       	cpi	r24, 0xC5	; 197
 172:	49 e0       	ldi	r20, 0x09	; 9
 174:	94 07       	cpc	r25, r20
 176:	10 f4       	brcc	.+4      	; 0x17c <__vector_14+0x5e>
			{
				OCR0A = 200; //sets value of counter one top to 200 (0-255)
 178:	27 bd       	out	0x27, r18	; 39
 17a:	04 c0       	rjmp	.+8      	; 0x184 <__vector_14+0x66>
			}
		
			else if(melody_counter<5000)
 17c:	88 38       	cpi	r24, 0x88	; 136
 17e:	93 41       	sbci	r25, 0x13	; 19
 180:	08 f4       	brcc	.+2      	; 0x184 <__vector_14+0x66>
			{
				OCR0A = 50; //after 2500 loops sets top value of counter to 50
 182:	37 bd       	out	0x27, r19	; 39
			} //loop with if else statement responsible to produce a melody
		melody_counter++; // increments variable in +1
 184:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <melody_counter>
 188:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <melody_counter+0x1>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <melody_counter+0x1>
 192:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <melody_counter>
	UDR0 = data;
}

ISR(TIMER0_COMPA_vect) // interruption enabled on TIMER 0A compare
{
	while(melody_counter<5000  && (~PIND&(1<<PD2))){ // while meloduy_counter is minor thant 5000 (hardcoded value) 
 196:	88 38       	cpi	r24, 0x88	; 136
 198:	93 41       	sbci	r25, 0x13	; 19
 19a:	10 f4       	brcc	.+4      	; 0x1a0 <__vector_14+0x82>
 19c:	4a 9b       	sbis	0x09, 2	; 9
 19e:	dc cf       	rjmp	.-72     	; 0x158 <__vector_14+0x3a>
			{
				OCR0A = 50; //after 2500 loops sets top value of counter to 50
			} //loop with if else statement responsible to produce a melody
		melody_counter++; // increments variable in +1
	}
	PORTB&=~(1<<PB2);// after the loop led is turned off
 1a0:	2a 98       	cbi	0x05, 2	; 5
	melody_counter = 0;// variable is set 0 again
 1a2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <melody_counter+0x1>
 1a6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <melody_counter>
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <__vector_21>:

ISR(ADC_vect) //interruption to run on ADC update not used for now
{
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
}
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_18>:

ISR(USART_RX_vect) // RX interrupt
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	val = USART_Receive(); // stores the value read in the function USART_receive
 1fc:	0e 94 7f 00 	call	0xfe	; 0xfe <USART_Receive>
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <val+0x1>
 206:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <val>
		if(val == 65) // If value equals 65 or 'A' 
 20a:	81 34       	cpi	r24, 0x41	; 65
 20c:	91 05       	cpc	r25, r1
 20e:	19 f4       	brne	.+6      	; 0x216 <__vector_18+0x3c>
		{
			TCCR0B |=(1<<CS00); // it enables time counter 0A and activates the corresponding interrupt
 210:	85 b5       	in	r24, 0x25	; 37
 212:	81 60       	ori	r24, 0x01	; 1
 214:	85 bd       	out	0x25, r24	; 37
		}
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <__vector_20>:

ISR(USART_TX_vect)
{
 238:	1f 92       	push	r1
 23a:	0f 92       	push	r0
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	0f 92       	push	r0
 240:	11 24       	eor	r1, r1
	UDR0 = 0x00;
 242:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <main>:

int main(void)
{
	DDRB |= (1<<DDB1);  //Sets PB1 as an Output
 250:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<DDB2); //Sets PB2 as an Output
 252:	22 9a       	sbi	0x04, 2	; 4
	DDRD |= (1<<DDD6); //Sets PD6 as an Output
 254:	56 9a       	sbi	0x0a, 6	; 10
	DDRD &= ~(1<<PD2); //Makes PD2 as Input
 256:	52 98       	cbi	0x0a, 2	; 10
	DDRD |= (1<<PD4); //Makes PD2 as Output
 258:	54 9a       	sbi	0x0a, 4	; 10
	setPWM(); // calls function setPWM() on main
 25a:	0e 94 48 00 	call	0x90	; 0x90 <setPWM>
	setBuzzer(); // calls function setBuzzer() on main
 25e:	0e 94 59 00 	call	0xb2	; 0xb2 <setBuzzer>
	adc_setup(); // calls adcSetup() on main
 262:	0e 94 65 00 	call	0xca	; 0xca <adc_setup>
	USART_Init(MYUBRR); //calls USART_Init on main passing baud rate as parameter
 266:	8c e0       	ldi	r24, 0x0C	; 12
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 74 00 	call	0xe8	; 0xe8 <USART_Init>
	OCR1A = ICR1 - 1200; // sets the position of the servo to 0º
 26e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 272:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 276:	80 5b       	subi	r24, 0xB0	; 176
 278:	94 40       	sbci	r25, 0x04	; 4
 27a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 27e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	sei(); // it enables interrupts
 282:	78 94       	sei
	while (1) 
    {
		if(PIND&(1<<PD2)) //checks if push button is pressed
		{
			while(counter<(ADC*20)) // runs the equivalence of 20 times the value of the potentiometer to send the communication
 284:	c8 e7       	ldi	r28, 0x78	; 120
 286:	d0 e0       	ldi	r29, 0x00	; 0
 288:	0f 2e       	mov	r0, r31
 28a:	f4 e1       	ldi	r31, 0x14	; 20
 28c:	df 2e       	mov	r13, r31
 28e:	f0 2d       	mov	r31, r0
				counter+=2;//it increments the value by 2 at the time
			}
			counter = 0; // resets the counter
			USART_Transmit('C');//sends 'C' to the arduino via USART_Transmit function, passing the char as parameter
			PORTB&=~(1<<PB2); // turns off LED
			OCR1A = ICR1 - 1200; //sets Servo back to position 0º
 290:	06 e8       	ldi	r16, 0x86	; 134
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	0f 2e       	mov	r0, r31
 296:	f8 e8       	ldi	r31, 0x88	; 136
 298:	ef 2e       	mov	r14, r31
 29a:	f1 2c       	mov	r15, r1
 29c:	f0 2d       	mov	r31, r0
	USART_Init(MYUBRR); //calls USART_Init on main passing baud rate as parameter
	OCR1A = ICR1 - 1200; // sets the position of the servo to 0º
	sei(); // it enables interrupts
	while (1) 
    {
		if(PIND&(1<<PD2)) //checks if push button is pressed
 29e:	4a 9b       	sbis	0x09, 2	; 9
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <main+0x4e>
		{
			while(counter<(ADC*20)) // runs the equivalence of 20 times the value of the potentiometer to send the communication
 2a2:	48 81       	ld	r20, Y
 2a4:	59 81       	ldd	r21, Y+1	; 0x01
 2a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2ae:	d4 9e       	mul	r13, r20
 2b0:	90 01       	movw	r18, r0
 2b2:	d5 9e       	mul	r13, r21
 2b4:	30 0d       	add	r19, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	82 17       	cp	r24, r18
 2ba:	93 07       	cpc	r25, r19
 2bc:	78 f4       	brcc	.+30     	; 0x2dc <main+0x8c>
			{
				counter+=2;//it increments the value by 2 at the time
 2be:	02 96       	adiw	r24, 0x02	; 2
 2c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	sei(); // it enables interrupts
	while (1) 
    {
		if(PIND&(1<<PD2)) //checks if push button is pressed
		{
			while(counter<(ADC*20)) // runs the equivalence of 20 times the value of the potentiometer to send the communication
 2c8:	48 81       	ld	r20, Y
 2ca:	59 81       	ldd	r21, Y+1	; 0x01
 2cc:	d4 9e       	mul	r13, r20
 2ce:	90 01       	movw	r18, r0
 2d0:	d5 9e       	mul	r13, r21
 2d2:	30 0d       	add	r19, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	82 17       	cp	r24, r18
 2d8:	93 07       	cpc	r25, r19
 2da:	88 f3       	brcs	.-30     	; 0x2be <main+0x6e>
			{
				counter+=2;//it increments the value by 2 at the time
			}
			counter = 0; // resets the counter
 2dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			USART_Transmit('C');//sends 'C' to the arduino via USART_Transmit function, passing the char as parameter
 2e4:	83 e4       	ldi	r24, 0x43	; 67
 2e6:	0e 94 87 00 	call	0x10e	; 0x10e <USART_Transmit>
			PORTB&=~(1<<PB2); // turns off LED
 2ea:	2a 98       	cbi	0x05, 2	; 5
			OCR1A = ICR1 - 1200; //sets Servo back to position 0º
 2ec:	f8 01       	movw	r30, r16
 2ee:	80 81       	ld	r24, Z
 2f0:	91 81       	ldd	r25, Z+1	; 0x01
 2f2:	80 5b       	subi	r24, 0xB0	; 176
 2f4:	94 40       	sbci	r25, 0x04	; 4
 2f6:	f7 01       	movw	r30, r14
 2f8:	91 83       	std	Z+1, r25	; 0x01
 2fa:	80 83       	st	Z, r24
			TCCR0B &= ~(1<<CS00);	//turns of timer 0 where the buzzer is connected	
 2fc:	85 b5       	in	r24, 0x25	; 37
 2fe:	8e 7f       	andi	r24, 0xFE	; 254
 300:	85 bd       	out	0x25, r24	; 37
 302:	cd cf       	rjmp	.-102    	; 0x29e <main+0x4e>

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
